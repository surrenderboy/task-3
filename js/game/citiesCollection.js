(function (root) {
  'use strict';

  const CITIES_JSON_PATH = 'cities.json';

  let cities = {};

  /**
   * Объект для доступа к коллекции городов.
   *
   * Я выбрал решение загрузить список городов до начала игры, потому что для
   * данной задачи не существует готового API. К примеру, нет возможности
   * запросить список городов, начинающихся на определенную букву, или точно
   * определить тип названия, введенного пользователем (в API Яндекс.Карт Москва
   * это 'province', а не 'locality'). Грубо говоря, нет "источника правды".
   *
   * Минусы этого решения:
   *  1. Список городов достаточно большой и много весит. И чем больше городов
   *     добавлять в список — тем хуже.
   *  2. Поиск города не оптимален из-за отсутствия специaлизированных средств.
   *     Опять же чем больше городов — тем хуже
   *
   * Идеальным решеним было бы сделать сервер удовлетворяющий условиям задачи.
   *
   * Список городов был составлен из базы городов с населением > 15 000,
   * взятый с ресурса www.geonames.org.
   *
   * Коллекция представлена в виде объекта:
   * { ... , "Н": { "нью йорк": "Нью-Йорк", "нев де хулио": "Нев-де-Хулио", ... }, ... },
   * где ключ — прописная буква, а значение — коллекция городов, начинающихся
   * на эту букву.
   *
   * Коллекция городов представляет собой объект, где ключи — нормализованные
   * для поиска названия городов (приведенные к нижнему регистру, с отсутствием
   * дефисов), а значения — оригинальные названия городов.
   */
  const citiesCollection = {
    /**
     * Загружает коллекцию из json-файла расположенного по пути CITIES_JSON_PATH
     *
     * @return {Promise} Промис с пустым значением, означающий окончание загрузки
     */
    loadCities() {
      return (
        fetch(CITIES_JSON_PATH)
          .then(res => res.json())
          .then(data => cities = data)
      );
    },

    /**
     * Возвращает случайный город из коллекции, начинающийся на букву
     *
     * @param {string} letter буква
     * @param {string} оригинальное название города
     */
    getRandomCity(letter) {
      let names = Object.values(cities[letter.toUpperCase()]);

      return names[randomInt(0, names.length)];
    },

    /**
     * Возвращает оргинальное название города по поисковому запросу
     *
     * @param {string} поисковой запрос
     * @return {string} оригинальное название города
     */
    getOriginalCity(query) {
      query = query.toLowerCase().replace(/-/g, ' ');

      let firstLetter = query.slice(0, 1).toUpperCase();

      return cities[firstLetter][query];
    }
  }

  /**
   * Возвращает случайное целое число от min до max, не включая max
   *
   * @param {number} min минимум
   * @param {number} max максимум
   * @return {number} слуачайное число
   */
  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  }

  root.game.citiesCollection = citiesCollection;
})(this);
